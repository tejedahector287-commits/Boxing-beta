boxing-trainer-pwa/
│
├── boxing_trainer.html
├── manifest.json
├── service-worker.js
├── icon.png
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Boxing Beta Trainer</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="manifest" href="manifest.json">
  <meta name="theme-color" content="#ff4444">
  <style>
    body { font-family: Arial, sans-serif; text-align: center; background: #111; color: white; }
    h1 { color: #ff4444; }
    button { padding: 10px 20px; margin: 10px; font-size: 18px; border: none; border-radius: 6px; }
    .menu button { background: #444; color: white; }
    .back { background: #ff4444; }
    .action { font-size: 32px; margin: 20px; }
  </style>
</head>
<body>
  <h1>🥊 Boxing Beta Trainer</h1>
  <div id="menu" class="menu">
    <button onclick="reactionDrill()">⚡ Reaction Drill</button><br>
    <button onclick="comboDrill()">🔗 Combo Drill</button><br>
    <button onclick="reflexDrill()">🛡️ Reflex Trainer</button><br>
    <button onclick="strategyGuide()">📖 Strategy Guide</button>
  </div>
  <div id="game"></div>

  <script>
    const moves = ["Jab","Cross","Hook","Uppercut","Block","Dodge"];
    const actions = {"⬅️":"Dodge Left","➡️":"Dodge Right","🛡️":"Block","👊":"Counter"};

    function showMenu(){document.getElementById("game").innerHTML="";document.getElementById("menu").style.display="block";}

    function reactionDrill(){
      document.getElementById("menu").style.display="none";
      const game=document.getElementById("game");
      game.innerHTML="<p>Tap screen when move appears!</p><div id='action'></div><button class='back' onclick='showMenu()'>⬅️ Back</button>";
      const actionBox=document.getElementById("action");
      function nextMove(){
        setTimeout(()=>{
          let move=moves[Math.floor(Math.random()*moves.length)];
          actionBox.innerHTML="➡️ "+move;
          let start=Date.now();
          window.onclick=()=>{
            let reaction=(Date.now()-start)/1000;
            actionBox.innerHTML=`⚡ ${reaction.toFixed(2)}s`;
            window.onclick=null;
            nextMove();
          };
        },Math.random()*2000+1000);
      }nextMove();
    }

    function comboDrill(){
      document.getElementById("menu").style.display="none";
      const game=document.getElementById("game");
      let round=1;
      game.innerHTML="<div id='combo'></div><input id='input' placeholder='Type combo here'><button onclick='checkCombo()'>Submit</button><p id='result'></p><button class='back' onclick='showMenu()'>⬅️ Back</button>";
      const comboBox=document.getElementById("combo");
      const result=document.getElementById("result");
      let combo=[];
      function newCombo(){
        combo=[];
        for(let i=0;i<Math.min(3+Math.floor(round/2),6);i++){combo.push(moves[Math.floor(Math.random()*moves.length)]);}
        comboBox.innerHTML="⚡ Combo: "+combo.join(" ");
      }
      window.checkCombo=function(){
        let input=document.getElementById("input").value.trim().split(" ");
        if(JSON.stringify(input)===JSON.stringify(combo)){result.innerHTML="✅ Correct!";} 
        else{result.innerHTML="❌ Wrong. Correct: "+combo.join(" ");}
        round++; newCombo();
      };
      newCombo();
    }

    function reflexDrill(){
      document.getElementById("menu").style.display="none";
      const game=document.getElementById("game");
      game.innerHTML="<p>Tap screen when cue appears!</p><div id='cue'></div><button class='back' onclick='showMenu()'>⬅️ Back</button>";
      const cueBox=document.getElementById("cue");
      function nextCue(){
        setTimeout(()=>{
          let keys=Object.keys(actions);
          let cue=keys[Math.floor(Math.random()*keys.length)];
          cueBox.innerHTML=cue+" "+actions[cue];
          let start=Date.now();
          window.onclick=()=>{
            let reaction=(Date.now()-start)/1000;
            cueBox.innerHTML=`⚡ ${reaction.toFixed(2)}s`;
            window.onclick=null;
            nextCue();
          };
        },Math.random()*2000+1000);
      }
      nextCue();
    }

    function strategyGuide(){
      document.getElementById("menu").style.display="none";
      document.getElementById("game").innerHTML=`
      <h2>📖 Strategy Guide</h2>
      <p>🪫 Stamina: Don’t spam, save energy.</p>
      <p>⏱️ Timing: Block & counter drains stamina.</p>
      <p>🔗 Combos: Jab→Cross→Hook, Jab→Block→Counter.</p>
      <p>🎣 Baiting: Fake pressure, punish whiffs.</p>
      <p>🛡️ Defense: Block/dodge > trading hits.</p>
      <button class='back' onclick='showMenu()'>⬅️ Back</button>`;
    }

    if("serviceWorker" in navigator){navigator.serviceWorker.register("service-worker.js").then(()=>console.log("Service Worker registered")).catch(err=>console.log("SW error:",err));}
  </script>
</body>
</html>
{
  "name": "Boxing Beta Trainer",
  "short_name": "BoxingTrainer",
  "start_url": "boxing_trainer.html",
  "display": "standalone",
  "background_color": "#111111",
  "theme_color": "#ff4444",
  "icons": [
    {
      "src": "icon.png",
      "sizes": "192x192",
      "type": "instagram/image/png"
    }
  ]
}
const CACHE_NAME="boxing-trainer-cache-v1";
const urlsToCache=["boxing_trainer.html","manifest.json","icon.png"];

self.addEventListener("install",event=>{
  event.waitUntil(caches.open(CACHE_NAME).then(cache=>cache.addAll(urlsToCache)));
});

self.addEventListener("fetch",event=>{
  event.respondWith(caches.match(event.request).then(response=>response||fetch(event.request)));
});
